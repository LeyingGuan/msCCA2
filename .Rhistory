Sig_agg = Signals[[1]]
for(d in 2:D){
Sig_agg = cbind(Sig_agg, Signals[[d]])
}
#empirical covariance
Sigma = matrix(0, nrow = p*D, ncol = p*D)
Lambda = matrix(0, nrow = p*D, ncol = p*D)
Sigma_s = matrix(0, nrow = p*D, ncol = p*D)
Lambda_s = matrix(0, nrow = p*D, ncol = p*D)
for(d in 1:D){
ll1 = ((d-1)*p+1):(d*p)
for(d1 in 1:D){
ll2 = ((d1-1)*p+1):(d1*p)
Sigma[ll1,ll2] = t(X[[d]])%*%X[[d1]]/n
Sigma_s[ll1,ll2] = t(Signals[[d]])%*%Signals[[d1]]/n
if(d1 == d){
Sigma_s[ll1,ll2] =  Sigma_s[ll1,ll2]+diag(rep(1,p))
Sigma[ll1,ll2] =  Sigma[ll1,ll2]+diag(rep(1e-1,p))
Lambda[ll1, ll2] = Sigma[ll1,ll2]
Lambda_s[ll1, ll2] = Sigma_s[ll1,ll2]
}
}
}
Fhat  = Sigma - Lambda
tmp0 = svd(Lambda)$d
tmp = solve(Lambda+diag(max(tmp0)/2, ncol(Lambda)))
tmp1 = tmp%*%Fhat%*%tmp
thr = sort(abs(tmp1),decreasing = T)[n*n]
s1 = apply(tmp1^2,1,sum)
aa = (abs(tmp)<=thr)
tmp2 = abs(tmp1) - thr
tmp2[tmp2<0] = 0
s2 = apply(tmp2^2,1,sum)
s3 = (betas_truth_concatenate[,1]^2+betas_truth_concatenate[,2]^2)
ps = sapply(X, function(z) dim(z)[2])
pss = c(0,cumsum(ps))
beta_hat = mCCA_naive(Sigma, Lambda, K = K)
beta_signal = mCCA_naive(Sigma_s, Lambda_s, K = K)
truth_lambdas = diag(t(beta_signal)%*%Sigma_s%*%beta_signal)
cor(Xagg%*%beta_hat,  Xagg%*%beta_signal)
truth_lambdas
cor(beta_hat,  beta_signal)
cor(beta_hat[1:(2*p),],  beta_signal[1:(2*p),])
C = matrix(1, ncol = length(X), nrow = length(X))
diag(C) = 0
rcca.with.rgcca = rgcca(A=X,
C =C, ncomp = rep(2,length(X)),
tau = rep(0.5, length(X)))
z= 0
for(k in 1:length(X)){
z = z+X[[k]]%*%rcca.with.rgcca$a[[k]]
}
cor(z,Xagg%*%beta_signal)
cor(z,Sig_agg%*%beta_signal)
#sparse
rcca.with.scca = sgcca(A=X,, c1 = rep(1, length(X)),
C =C, ncomp = rep(2,length(X)))
z= 0
for(k in 1:length(X)){
z = z+X[[k]]%*%rcca.with.scca$a[[k]]
}
cor(z,Xagg%*%beta_signal)
cor(z,Sig_agg%*%beta_signal)
#msCCA - pdd
truth_lambdas
Lambda  = matrix(0, ncol = pss[length(X)+1], nrow = pss[length(X)+1])
for(d in 1:length(X)){
ll1 = (pss[d]+1):(pss[d+1])
Lambda[ll1, ll1] = t(X[[d]])%*%X[[d]]/n
}
beta_init = rcca.with.rgcca$a[[1]]
for(k in 2:length(rcca.with.rgcca$a)){
beta_init = rbind(beta_init,rcca.with.rgcca$a[[k]])
}
pdd_obj = mCCA$new(X = X, K = 1, rho = NULL, eta = NULL, eps = NULL,
decay1 = NULL, decay2 = NULL, growth = NULL)
out_pdd =pdd_obj$directions_new(beta_init = beta_init[,1]/sqrt(sum(ss)),gammas = rep(0.5, length(X)), max_iter=1000, min_iter = 5, max_iter0 = 100, tol =1e-8, method = "pdd", trace = F)
out_pdd$lambdas
cor(out_pdd$Zhats_sum,Xagg%*%beta_signal)
cor(out_pdd$Zhats_sum,Sig_agg%*%beta_signal)
sum(out_pdd$Zhats^2)
sum(abs(out_pdd$beta_agg))
pdd_obj = mCCA$new(X = X, K = 1, rho = NULL, eta = NULL, eps = NULL,
decay1 = NULL, decay2 = NULL, growth = NULL)
out_pdd =pdd_obj$directions_new(beta_init = beta_init[,1]/sqrt(sum(ss)),gammas = rep(0.1, length(X)), max_iter=1000, min_iter = 5, max_iter0 = 100, tol =1e-8, method = "pdd", trace = F)
out_pdd$lambdas
cor(out_pdd$Zhats_sum,Xagg%*%beta_signal)
cor(out_pdd$Zhats_sum,Sig_agg%*%beta_signal)
sum(out_pdd$Zhats^2)
sum(abs(out_pdd$beta_agg))
z= 0
for(k in 1:length(X)){
z = z+X[[k]]%*%rcca.with.scca$a[[k]]
}
cor(z,Xagg%*%beta_signal)
cor(z,Sig_agg%*%beta_signal)
pdd_obj = mCCA$new(X = X, K = 1, rho = NULL, eta = NULL, eps = NULL,
decay1 = NULL, decay2 = NULL, growth = NULL)
out_pdd =pdd_obj$directions_new(beta_init = beta_init[,1]/sqrt(sum(ss)),gammas = rep(0.2, length(X)), max_iter=1000, min_iter = 5, max_iter0 = 100, tol =1e-8, method = "pdd", trace = F)
out_pdd$lambdas
cor(out_pdd$Zhats_sum,Xagg%*%beta_signal)
cor(out_pdd$Zhats_sum,Sig_agg%*%beta_signal)
sum(out_pdd$Zhats^2)
sum(abs(out_pdd$beta_agg))
pdd_obj = mCCA$new(X = X, K = 1, rho = NULL, eta = NULL, eps = NULL,
decay1 = NULL, decay2 = NULL, growth = NULL)
out_pdd =pdd_obj$directions_new(beta_init = beta_init[,1]/sqrt(sum(ss)),gammas = rep(0.1, length(X)), max_iter=1000, min_iter = 5, max_iter0 = 100, tol =1e-8, method = "pdd", trace = F)
out_pdd$lambdas
cor(out_pdd$Zhats_sum,Xagg%*%beta_signal)
cor(out_pdd$Zhats_sum,Sig_agg%*%beta_signal)
sum(out_pdd$Zhats^2)
sum(abs(out_pdd$beta_agg))
pdd_obj = mCCA$new(X = X, K = 1, rho = NULL, eta = NULL, eps = NULL,
decay1 = NULL, decay2 = NULL, growth = NULL)
out_pdd =pdd_obj$directions_new(beta_init = beta_init[,1]/sqrt(sum(ss)),gammas = rep(0.25, length(X)), max_iter=1000, min_iter = 5, max_iter0 = 100, tol =1e-8, method = "pdd", trace = F)
out_pdd$lambdas
cor(out_pdd$Zhats_sum,Xagg%*%beta_signal)
cor(out_pdd$Zhats_sum,Sig_agg%*%beta_signal)
sum(out_pdd$Zhats^2)
sum(abs(out_pdd$beta_agg))
pdd_obj = mCCA$new(X = X, K = 1, rho = NULL, eta = NULL, eps = NULL,
decay1 = NULL, decay2 = NULL, growth = NULL)
out_pdd =pdd_obj$directions_new(beta_init = beta_init[,1]/sqrt(sum(ss)),gammas = rep(0.3, length(X)), max_iter=1000, min_iter = 5, max_iter0 = 100, tol =1e-8, method = "pdd", trace = F)
out_pdd$lambdas
cor(out_pdd$Zhats_sum,Xagg%*%beta_signal)
cor(out_pdd$Zhats_sum,Sig_agg%*%beta_signal)
sum(out_pdd$Zhats^2)
sum(abs(out_pdd$beta_agg))
#cor(beta_signal,  beta_signal)
pdd_obj = mCCA$new(X = X, K = 1, rho = NULL, eta = NULL, eps = NULL,
decay1 = NULL, decay2 = NULL, growth = NULL)
out_pdd =pdd_obj$directions_new(beta_init = beta_init[,1]/sqrt(sum(ss)),gammas = rep(0.25, length(X)), max_iter=1000, min_iter = 5, max_iter0 = 100, tol =1e-8, method = "pdd", trace = F)
out_pdd$lambdas
cor(out_pdd$Zhats_sum,Xagg%*%beta_signal)
cor(out_pdd$Zhats_sum,Sig_agg%*%beta_signal)
sum(out_pdd$Zhats^2)
sum(abs(out_pdd$beta_agg))
set.seed(11)
n = 100; K = 4; p = 100; D = 4
Z = matrix(rnorm(n=n*K), ncol = K)
betas_truth = array(0, dim = c(p, D, K))
betas_truth_concatenate = array(0, dim = c(p*D, K))
s = c(0.9, 0.8, 0.7, 0.6); D0 = 2; sparsity = 20
alpha = .1
X = list()
Signals = list()
for(d in 1:D){
X[[d]] = matrix(rnorm(n=n*p), ncol = p)
for(k in 1:K){
betas_truth[sample(1:p, sparsity),d,k] = rnorm(n = sparsity)
betas_truth[,d,k] = betas_truth[,d,k]/sqrt(sum(betas_truth[,d,k]^2)) * s[d]
}
if(d > D0){
betas_truth[,d,k] = betas_truth[,d,k]*alpha
}
Signals[[d]] = Z%*%t(betas_truth[,d,])
X[[d]] = X[[d]] +  Signals[[d]]
}
Xagg = X[[1]]
for(d in 1:D){
ll1 = ((d-1)*p+1):(d*p)
betas_truth_concatenate[ll1,] = betas_truth[,d,]
}
Xagg = X[[1]]
for(d in 2:D){
Xagg = cbind(Xagg, X[[d]])
}
Sig_agg = Signals[[1]]
for(d in 2:D){
Sig_agg = cbind(Sig_agg, Signals[[d]])
}
#empirical covariance
Sigma = matrix(0, nrow = p*D, ncol = p*D)
Lambda = matrix(0, nrow = p*D, ncol = p*D)
Sigma_s = matrix(0, nrow = p*D, ncol = p*D)
Lambda_s = matrix(0, nrow = p*D, ncol = p*D)
for(d in 1:D){
ll1 = ((d-1)*p+1):(d*p)
for(d1 in 1:D){
ll2 = ((d1-1)*p+1):(d1*p)
Sigma[ll1,ll2] = t(X[[d]])%*%X[[d1]]/n
Sigma_s[ll1,ll2] = t(Signals[[d]])%*%Signals[[d1]]/n
if(d1 == d){
Sigma_s[ll1,ll2] =  Sigma_s[ll1,ll2]+diag(rep(1,p))
Sigma[ll1,ll2] =  Sigma[ll1,ll2]+diag(rep(1e-1,p))
Lambda[ll1, ll2] = Sigma[ll1,ll2]
Lambda_s[ll1, ll2] = Sigma_s[ll1,ll2]
}
}
}
Fhat  = Sigma - Lambda
tmp0 = svd(Lambda)$d
tmp = solve(Lambda+diag(max(tmp0)/2, ncol(Lambda)))
tmp1 = tmp%*%Fhat%*%tmp
thr = sort(abs(tmp1),decreasing = T)[n*n]
s1 = apply(tmp1^2,1,sum)
aa = (abs(tmp)<=thr)
tmp2 = abs(tmp1) - thr
tmp2[tmp2<0] = 0
s2 = apply(tmp2^2,1,sum)
s3 = (betas_truth_concatenate[,1]^2+betas_truth_concatenate[,2]^2)
ps = sapply(X, function(z) dim(z)[2])
pss = c(0,cumsum(ps))
beta_hat = mCCA_naive(Sigma, Lambda, K = K)
beta_signal = mCCA_naive(Sigma_s, Lambda_s, K = K)
truth_lambdas = diag(t(beta_signal)%*%Sigma_s%*%beta_signal)
cor(Xagg%*%beta_hat,  Xagg%*%beta_signal)
truth_lambdas
cor(beta_hat,  beta_signal)
cor(beta_hat[1:(2*p),],  beta_signal[1:(2*p),])
C = matrix(1, ncol = length(X), nrow = length(X))
diag(C) = 0
rcca.with.rgcca = rgcca(A=X,
C =C, ncomp = rep(2,length(X)),
tau = rep(0.5, length(X)))
z= 0
for(k in 1:length(X)){
z = z+X[[k]]%*%rcca.with.rgcca$a[[k]]
}
cor(z,Xagg%*%beta_signal)
cor(z,Sig_agg%*%beta_signal)
truth_lambdas
#sparse
rcca.with.scca = sgcca(A=X,, c1 = rep(1, length(X)),
C =C, ncomp = rep(2,length(X)))
z= 0
for(k in 1:length(X)){
z = z+X[[k]]%*%rcca.with.scca$a[[k]]
}
cor(z,Xagg%*%beta_signal)
cor(z,Sig_agg%*%beta_signal)
#msCCA - pdd
#msCCA - pdd
truth_lambdas
Lambda  = matrix(0, ncol = pss[length(X)+1], nrow = pss[length(X)+1])
for(d in 1:length(X)){
ll1 = (pss[d]+1):(pss[d+1])
Lambda[ll1, ll1] = t(X[[d]])%*%X[[d]]/n
}
beta_init = rcca.with.rgcca$a[[1]]
for(k in 2:length(rcca.with.rgcca$a)){
beta_init = rbind(beta_init,rcca.with.rgcca$a[[k]])
}
pdd_obj = mCCA$new(X = X, K = 1, rho = NULL, eta = NULL, eps = NULL,
decay1 = NULL, decay2 = NULL, growth = NULL)
out_pdd =pdd_obj$directions_new(beta_init = beta_init[,1]/sqrt(sum(ss)),gammas = rep(0.25, length(X)), max_iter=1000, min_iter = 5, max_iter0 = 100, tol =1e-8, method = "pdd", trace = F)
out_pdd$lambdas
cor(out_pdd$Zhats_sum,Xagg%*%beta_signal)
cor(out_pdd$Zhats_sum,Sig_agg%*%beta_signal)
sum(out_pdd$Zhats^2)
sum(abs(out_pdd$beta_agg))
pdd_obj = mCCA$new(X = X, K = 1, rho = NULL, eta = NULL, eps = NULL,
decay1 = NULL, decay2 = NULL, growth = NULL)
out_pdd =pdd_obj$directions_new(beta_init = beta_init[,1]/sqrt(sum(ss)),gammas = rep(0.3, length(X)), max_iter=1000, min_iter = 5, max_iter0 = 100, tol =1e-8, method = "pdd", trace = F)
out_pdd$lambdas
cor(out_pdd$Zhats_sum,Xagg%*%beta_signal)
cor(out_pdd$Zhats_sum,Sig_agg%*%beta_signal)
sum(out_pdd$Zhats^2)
sum(abs(out_pdd$beta_agg))
pdd_obj = mCCA$new(X = X, K = 1, rho = NULL, eta = NULL, eps = NULL,
decay1 = NULL, decay2 = NULL, growth = NULL)
out_pdd =pdd_obj$directions_new(beta_init = beta_init[,1]/sqrt(sum(ss)),gammas = rep(0.25, length(X)), max_iter=1000, min_iter = 5, max_iter0 = 100, tol =1e-8, method = "pdd", trace = F)
out_pdd$lambdas
cor(out_pdd$Zhats_sum,Xagg%*%beta_signal)
cor(out_pdd$Zhats_sum,Sig_agg%*%beta_signal)
sum(out_pdd$Zhats^2)
sum(abs(out_pdd$beta_agg))
Rcpp::sourceCpp('~/Dropbox/CrossCorrespondance/mutilpleSetLinear/code/msCCA2/src/solvers.cpp')
Rcpp::sourceCpp('~/Dropbox/CrossCorrespondance/mutilpleSetLinear/code/msCCA2/src/solvers.cpp')
Rcpp::sourceCpp('~/Dropbox/CrossCorrespondance/mutilpleSetLinear/code/msCCA2/src/solvers.cpp')
Rcpp::sourceCpp('~/Dropbox/CrossCorrespondance/mutilpleSetLinear/code/msCCA2/src/solvers.cpp')
Rcpp::sourceCpp('~/Dropbox/CrossCorrespondance/mutilpleSetLinear/code/msCCA2/src/solvers.cpp')
Rcpp::sourceCpp('~/Dropbox/CrossCorrespondance/mutilpleSetLinear/code/msCCA2/src/solvers.cpp')
Rcpp::sourceCpp('~/Dropbox/CrossCorrespondance/mutilpleSetLinear/code/msCCA2/src/solvers.cpp')
getwd()
setwd("~/Dropbox/CrossCorrespondance/mutilpleSetLinear/code/")
rm(list= ls())
require(Rcpp)
require(RcppArmadillo)
require(tools)
compileAttributes(pkgdir = "msCCA2", verbose = TRUE)
package_native_routine_registration_skeleton(".", character_only = FALSE)
package_native_routine_registration_skeleton( "msCCA2", character_only = FALSE)
pkgbuild::compile_dll()
setwd("../../../../CrossCorrespondance/mutilpleSetLinear/code/msCCA2")
setwd("~/Dropbox/CrossCorrespondance/mutilpleSetLinear/code/msCCA2")
pkgbuild::compile_dll()
source('~/Dropbox/CrossCorrespondance/mutilpleSetLinear/code/msCCA2/R/msCCA.R')
library(PMA)
library(RGCCA)
library(Rcpp)
library(rifle)
library(parallel)
orthogonalize_func = function(U, Lambda_svd){
Uorth =(Lambda_svd$u)%*%diag(sqrt(Lambda_svd$d))%*%t(Lambda_svd$u)%*%U
if(ncol(U)>1){
for(k in 1:(ncol(U)-1)){
for(k1 in (k+1):ncol(U)){
Uorth[,k1] = lm(Uorth[,k1]~Uorth[,k]-1)$residuals
}
}
}
for(k in 1:ncol(U)){
Uorth[,k] = Uorth[,k]/sqrt(sum(Uorth[,k]^2))
}
Utransformed =Lambda_svd$u%*%diag(1.0/sqrt(Lambda_svd$d))%*%t((Lambda_svd$u))%*% Uorth
return(Utransformed)
}
print(detectCores())
nfolds = min(detectCores()-1,10)
sim_data_mCCA = function(n = 200, nte = 1000, p = 200, s = 10, D = 5, seed =2021, ncomp = 5,
redundant =T, type = "identity"){
set.seed(seed)
Lambda_list = list()
ps = rep(p, D)
pss = c(0, cumsum(ps))
ptotal = p*D
for(d in 1:D){
if(type == "identity"){
Lambda_list[[d]] = diag(rep(1, p))
}else if(type == "toplitz"){
A1 = matrix(rep(1:p, p), byrow = F, ncol = p)
A2 = matrix(rep(1:p, p), byrow = T, ncol = p)
A3 = abs(A1-A2)
Lambda_list[[d]] = 0.3^(A3)
}else if(type == "sparseInv"){
}else if(type == "spiked"){
U = matrix(rnorm(p*ncomp),ncol = ncomp)
U = apply(U,2,function(z) z/sqrt(sum(z^2)))
Lambda_list[[d]] = diag(rep(1, p))+100*U%*%t(U)
}else{
stop("unsupported covariance type.")
}
}
Lambda = matrix(0, ncol = ptotal, nrow = ptotal)
for(d in 1:D){
idx = (pss[d]+1):pss[d+1]
Lambda[idx, idx] = Lambda_list[[d]]
}
Lambda_svd = svd(Lambda)
##generate U, V: signal variance s * log(p)/n
U = matrix(rnorm(ptotal*ncomp),ncol = ncomp)
##randomly select some non-zeros from each assays
for(d in 1:D){
temp_U =  U[(pss[d]+1):(pss[d+1]),,drop = F]
for(k in 1:ncomp){
idx = sample(1:p, s)
temp_U[-idx,k] = 0
}
temp_U = scale(temp_U, center = F)
temp_U = temp_U
U[(pss[d]+1):(pss[d+1]),] = temp_U
}
###normalizing with respect to Lambda
for(d in 1:D){
temp_U =  U[(pss[d]+1):(pss[d+1]),,drop = F]
if((d<=2)|(d>2 & !(redundant))){
Lambda_svd1 = svd(Lambda_list[[d]])
temp_U = orthogonalize_func(temp_U,Lambda_svd1)
U[(pss[d]+1):(pss[d+1]),] = temp_U
}else{
U[(pss[d]+1):(pss[d+1]),] = 0
}
}
if(!redundant){
rhos = (.9 - c(0:(ncomp-1))/5)*sig
}else{
rhos = (.9 - c(0:(ncomp-1))/5)
}
if(ncol(U)>1){
Sigma = (Lambda%*%U)%*%diag(rhos)%*%(t(U)%*%Lambda)
}else{
Sigma = matrix((Lambda%*%U),ncol=1)%*%(t(U)%*%Lambda)*rhos
}
for(d in 1:D){
idx = (pss[d]+1):pss[d+1]
Sigma[idx, idx] = Lambda_list[[d]]
}
tmp = eigen(Sigma, symmetric = TRUE, only.values = FALSE, EISPACK = FALSE)
if(min(tmp$values)<0){
stop("none PD covariance.")
}
tmp1 = Lambda_svd$u%*%diag(sqrt(1.0/Lambda_svd$d))%*%t(Lambda_svd$u)
tmp2 = tmp1%*%Sigma%*%t(tmp1)
tmp3 =eigen(tmp2, symmetric = T)
U=tmp3$vectors[,1:ncomp]
rhos =tmp3$values[1:ncomp]
U = tmp1%*%U
Xagg = matrix(rnorm(n=n*ptotal), ncol = ptotal)%*%tmp$vectors%*%diag(sqrt(tmp$values))%*%t(tmp$vectors)
Xtestagg = matrix(rnorm(n=nte*ptotal), ncol = ptotal)%*%tmp$vectors%*%diag(sqrt(tmp$values))%*%t(tmp$vectors)
Xagg = scale(Xagg)
Xtestagg = scale(Xtestagg)
##check
X = list()
Xte = list()
Zsum = array(0, dim = c(n,ncomp))
Zsum.te =  array(0, dim = c(nte,ncomp))
Z = array(0, dim = c(n,D,ncomp))
Z.te = array(0, dim = c(nte, D, ncomp))
for(d in 1:D){
ll = (pss[d]+1):pss[d+1]
X[[d]] = Xagg[,ll]
Xte[[d]] = Xtestagg[,ll]
Z[,d,] = X[[d]]%*%U[ll,,drop = F]
Z.te[,d,] = Xte[[d]]%*%U[ll,]
}
Zsum = apply(Z,c(1,3),sum)
Zsum.te = apply(Z.te,c(1,3),sum)
return(list(X = X, X.agg = Xagg, Xte = Xte, Xte.agg= Xtestagg,
U = U, rhos = rhos, Z = Z, Z.te = Z.te, Zsum = Zsum, Zsum.te = Zsum.te,
Sigma = Sigma))
}
p = 300; nte = 1000; ncomp = 3; alpha = 0; D = 4; ncomp1 =10 #ncomp-1
n = 300
n=300; s = 10;D = 4;seed = sample(1:10000,1);  type = "identity";redundant = F
devtools::document()
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
ptotal = pss[D+1]
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
?rifle
nfolds = min(detectCores()-1,10)
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
source('~/Dropbox/CrossCorrespondance/mutilpleSetLinear/code/msCCA2/R/msCCA.R')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
?rifle
rm(list = ls())
getwd()
require(Rcpp)
require(RcppArmadillo)
require(tools)
#RcppArmadillo.package.skeleton(".")
compileAttributes(pkgdir = ".", verbose = TRUE)
package_native_routine_registration_skeleton( ".", character_only = FALSE)
compileAttributes(pkgdir = ".", verbose = TRUE)
pkgbuild::compile_dll()
devtools::document()
devtools::check()
devtools::document('.')
compileAttributes(pkgdir = ".", verbose = TRUE)
compileAttributes(pkgdir = ".", verbose = TRUE)
package_native_routine_registration_skeleton( ".", character_only = FALSE)
pkgbuild::compile_dll()
devtools::document()
devtools::check()
devtools::document('.')
getwd()
64857734/1024
64857734/1024/1024
64857734/1024/1024/1024
library(PMA)
library(RGCCA)
library(Rcpp)
library(rifle)
library(parallel)
library(doParallel)
?mclapply
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
Rcpp::sourceCpp('src/solvers.cpp')
rm(list =ls())
getwd()
compileAttributes(pkgdir = ".", verbose = TRUE)
package_native_routine_registration_skeleton( ".", character_only = FALSE)
compileAttributes(pkgdir = ".", verbose = TRUE)
pkgbuild::compile_dll()
devtools::document()
devtools::check()
devtools::document('.')
?pch
?boxplot
library(ggplot2)
?jitter
?geom_jitter
?position_jitterdodge
